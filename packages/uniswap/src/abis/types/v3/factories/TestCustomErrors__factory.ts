/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestCustomErrors,
  TestCustomErrorsInterface,
} from "../TestCustomErrors";

const _abi = [
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsafeCast",
    type: "error",
  },
];

const _bytecode =
  "0x608080604052346013576010908160188239f35b5f80fdfe5f80fdfea164736f6c634300081a000a";

export class TestCustomErrors__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestCustomErrors> {
    return super.deploy(overrides || {}) as Promise<TestCustomErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestCustomErrors {
    return super.attach(address) as TestCustomErrors;
  }
  connect(signer: Signer): TestCustomErrors__factory {
    return super.connect(signer) as TestCustomErrors__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCustomErrorsInterface {
    return new utils.Interface(_abi) as TestCustomErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCustomErrors {
    return new Contract(address, _abi, signerOrProvider) as TestCustomErrors;
  }
}
