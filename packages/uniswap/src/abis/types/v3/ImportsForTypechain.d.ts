/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ImportsForTypechainInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "clear(address,uint256)": FunctionFragment;
    "collectProtocolFees(address,address,uint256)": FunctionFragment;
    "donate((address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "extsload(bytes32)": FunctionFragment;
    "exttload(bytes32[])": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getPoolAndPositionInfo(uint256)": FunctionFragment;
    "getPositionLiquidity(uint256)": FunctionFragment;
    "initialize((address,address,uint24,int24,address),uint160)": FunctionFragment;
    "initializePool((address,address,uint24,int24,address),uint160)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "modifyLiquidities(bytes,uint256)": FunctionFragment;
    "modifyLiquiditiesWithoutUnlock(bytes,bytes[])": FunctionFragment;
    "modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "msgSender()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permit(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "permit2()": FunctionFragment;
    "permitBatch(address,(tuple[],address,uint256),bytes)": FunctionFragment;
    "permitForAll(address,address,bool,uint256,uint256,bytes)": FunctionFragment;
    "poolKeys(bytes25)": FunctionFragment;
    "poolManager()": FunctionFragment;
    "positionInfo(uint256)": FunctionFragment;
    "protocolFeeController()": FunctionFragment;
    "protocolFeesAccrued(address)": FunctionFragment;
    "revokeNonce(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setProtocolFee((address,address,uint24,int24,address),uint24)": FunctionFragment;
    "setProtocolFeeController(address)": FunctionFragment;
    "settle()": FunctionFragment;
    "settleFor(address)": FunctionFragment;
    "subscribe(uint256,address,bytes)": FunctionFragment;
    "subscriber(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync(address)": FunctionFragment;
    "take(address,address,uint256)": FunctionFragment;
    "tokenDescriptor()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(bytes)": FunctionFragment;
    "unlockCallback(bytes)": FunctionFragment;
    "unsubscribe(uint256)": FunctionFragment;
    "unsubscribeGasLimit()": FunctionFragment;
    "updateDynamicLPFee((address,address,uint24,int24,address),uint24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "extsload", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "exttload",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAndPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePool",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquidities",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquiditiesWithoutUnlock",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquidity",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      {
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
        salt: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitBatch",
    values: [
      string,
      {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitForAll",
    values: [string, string, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "poolKeys", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesAccrued",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(functionFragment: "settleFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      {
        zeroForOne: boolean;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values: [string]): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDynamicLPFee",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extsload", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exttload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAndPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquiditiesWithoutUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDynamicLPFee",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Donate(bytes32,address,uint256,uint256)": EventFragment;
    "Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)": EventFragment;
    "ModifyLiquidity(bytes32,address,int24,int24,int256,bytes32)": EventFragment;
    "OperatorSet(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolFeeControllerUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(bytes32,uint24)": EventFragment;
    "Subscription(uint256,address)": EventFragment;
    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)": EventFragment;
    "Transfer(address,address,address,uint256,uint256)": EventFragment;
    "Unsubscription(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeeControllerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscription"): EventFragment;
}

export type Approval_address_address_uint256_uint256_Event = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    owner: string;
    spender: string;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type Approval_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    id: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type DonateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    id: string;
    sender: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type InitializeEvent = TypedEvent<
  [string, string, string, number, number, string, BigNumber, number] & {
    id: string;
    currency0: string;
    currency1: string;
    fee: number;
    tickSpacing: number;
    hooks: string;
    sqrtPriceX96: BigNumber;
    tick: number;
  }
>;

export type ModifyLiquidityEvent = TypedEvent<
  [string, string, number, number, BigNumber, string] & {
    id: string;
    sender: string;
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    salt: string;
  }
>;

export type OperatorSetEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export type ProtocolFeeControllerUpdatedEvent = TypedEvent<
  [string] & { protocolFeeController: string }
>;

export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string, number] & { id: string; protocolFee: number }
>;

export type SubscriptionEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; subscriber: string }
>;

export type SwapEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    id: string;
    sender: string;
    amount0: BigNumber;
    amount1: BigNumber;
    sqrtPriceX96: BigNumber;
    liquidity: BigNumber;
    tick: number;
    fee: number;
  }
>;

export type Transfer_address_address_address_uint256_uint256_Event = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    caller: string;
    from: string;
    to: string;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export type Transfer_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; id: BigNumber }
>;

export type UnsubscriptionEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; subscriber: string }
>;

export class ImportsForTypechain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ImportsForTypechainInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "approve(address,uint256)"(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256,uint256)"(
      spender: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clear(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donate(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "extsload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "exttload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "exttload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolAndPositionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number, number, string] & {
          currency0: string;
          currency1: string;
          fee: number;
          tickSpacing: number;
          hooks: string;
        },
        BigNumber
      ] & {
        poolKey: [string, string, number, number, string] & {
          currency0: string;
          currency1: string;
          fee: number;
          tickSpacing: number;
          hooks: string;
        };
        info: BigNumber;
      }
    >;

    getPositionLiquidity(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    initialize(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePool(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyLiquidities(
      unlockData: BytesLike,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyLiquiditiesWithoutUnlock(
      actions: BytesLike,
      params: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyLiquidity(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
        salt: BytesLike;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    msgSender(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(
      owner: string,
      word: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bitmap: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    "permit(address,uint256,uint256,uint256,bytes)"(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit2(overrides?: CallOverrides): Promise<[string]>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitForAll(
      owner: string,
      operator: string,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolKeys(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, string] & {
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    positionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { info: BigNumber }>;

    protocolFeeController(overrides?: CallOverrides): Promise<[string]>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    revokeNonce(
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleFor(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { subscriber: string }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        zeroForOne: boolean;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenDescriptor(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transfer(
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256,uint256)"(
      sender: string,
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDynamicLPFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newDynamicLPFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "approve(address,uint256)"(
    spender: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256,uint256)"(
    spender: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "balanceOf(address,uint256)"(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    from: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clear(
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFees(
    recipient: string,
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donate(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    amount0: BigNumberish,
    amount1: BigNumberish,
    hookData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "extsload(bytes32)"(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "extsload(bytes32,uint256)"(
    startSlot: BytesLike,
    nSlots: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "extsload(bytes32[])"(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "exttload(bytes32[])"(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "exttload(bytes32)"(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPoolAndPositionInfo(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, string, number, number, string] & {
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
      },
      BigNumber
    ] & {
      poolKey: [string, string, number, number, string] & {
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
      };
      info: BigNumber;
    }
  >;

  getPositionLiquidity(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    sqrtPriceX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePool(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    sqrtPriceX96: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperator(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyLiquidities(
    unlockData: BytesLike,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyLiquiditiesWithoutUnlock(
    actions: BytesLike,
    params: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyLiquidity(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    params: {
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityDelta: BigNumberish;
      salt: BytesLike;
    },
    hookData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  msgSender(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(
    owner: string,
    word: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "permit(address,uint256,uint256,uint256,bytes)"(
    spender: string,
    tokenId: BigNumberish,
    deadline: BigNumberish,
    nonce: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
    owner: string,
    permitSingle: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      };
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit2(overrides?: CallOverrides): Promise<string>;

  permitBatch(
    owner: string,
    _permitBatch: {
      details: {
        token: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        nonce: BigNumberish;
      }[];
      spender: string;
      sigDeadline: BigNumberish;
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitForAll(
    owner: string,
    operator: string,
    approved: boolean,
    deadline: BigNumberish,
    nonce: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolKeys(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, string] & {
      currency0: string;
      currency1: string;
      fee: number;
      tickSpacing: number;
      hooks: string;
    }
  >;

  poolManager(overrides?: CallOverrides): Promise<string>;

  positionInfo(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  protocolFeeController(overrides?: CallOverrides): Promise<string>;

  protocolFeesAccrued(
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revokeNonce(
    nonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    newProtocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeController(
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleFor(
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    tokenId: BigNumberish,
    newSubscriber: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriber(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    params: {
      zeroForOne: boolean;
      amountSpecified: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
    },
    hookData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  take(
    currency: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenDescriptor(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transfer(
    receiver: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256,uint256)"(
    sender: string,
    receiver: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockCallback(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsubscribe(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  updateDynamicLPFee(
    key: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    newDynamicLPFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256,uint256)"(
      spender: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clear(
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "extsload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "exttload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "exttload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPoolAndPositionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number, number, string] & {
          currency0: string;
          currency1: string;
          fee: number;
          tickSpacing: number;
          hooks: string;
        },
        BigNumber
      ] & {
        poolKey: [string, string, number, number, string] & {
          currency0: string;
          currency1: string;
          fee: number;
          tickSpacing: number;
          hooks: string;
        };
        info: BigNumber;
      }
    >;

    getPositionLiquidity(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initializePool(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyLiquidities(
      unlockData: BytesLike,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyLiquiditiesWithoutUnlock(
      actions: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    modifyLiquidity(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
        salt: BytesLike;
      },
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callerDelta: BigNumber;
        feesAccrued: BigNumber;
      }
    >;

    msgSender(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: string,
      word: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "permit(address,uint256,uint256,uint256,bytes)"(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    permit2(overrides?: CallOverrides): Promise<string>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    permitForAll(
      owner: string,
      operator: string,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    poolKeys(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, string] & {
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<string>;

    positionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<string>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeNonce(nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setProtocolFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newProtocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeController(
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(overrides?: CallOverrides): Promise<BigNumber>;

    settleFor(recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        zeroForOne: boolean;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(currency: string, overrides?: CallOverrides): Promise<void>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenDescriptor(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transfer(
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256,uint256)"(
      sender: string,
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    unlockCallback(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateDynamicLPFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newDynamicLPFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256,uint256)"(
      owner?: string | null,
      spender?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { owner: string; spender: string; id: BigNumber; amount: BigNumber }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      id?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; id: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "Donate(bytes32,address,uint256,uint256)"(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { id: string; sender: string; amount0: BigNumber; amount1: BigNumber }
    >;

    Donate(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { id: string; sender: string; amount0: BigNumber; amount1: BigNumber }
    >;

    "Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)"(
      id?: BytesLike | null,
      currency0?: string | null,
      currency1?: string | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null,
      sqrtPriceX96?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, string, number, number, string, BigNumber, number],
      {
        id: string;
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
        sqrtPriceX96: BigNumber;
        tick: number;
      }
    >;

    Initialize(
      id?: BytesLike | null,
      currency0?: string | null,
      currency1?: string | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null,
      sqrtPriceX96?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, string, number, number, string, BigNumber, number],
      {
        id: string;
        currency0: string;
        currency1: string;
        fee: number;
        tickSpacing: number;
        hooks: string;
        sqrtPriceX96: BigNumber;
        tick: number;
      }
    >;

    "ModifyLiquidity(bytes32,address,int24,int24,int256,bytes32)"(
      id?: BytesLike | null,
      sender?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, string],
      {
        id: string;
        sender: string;
        tickLower: number;
        tickUpper: number;
        liquidityDelta: BigNumber;
        salt: string;
      }
    >;

    ModifyLiquidity(
      id?: BytesLike | null,
      sender?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      salt?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, string],
      {
        id: string;
        sender: string;
        tickLower: number;
        tickUpper: number;
        liquidityDelta: BigNumber;
        salt: string;
      }
    >;

    "OperatorSet(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    OperatorSet(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnershipTransferred(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    "ProtocolFeeControllerUpdated(address)"(
      protocolFeeController?: string | null
    ): TypedEventFilter<[string], { protocolFeeController: string }>;

    ProtocolFeeControllerUpdated(
      protocolFeeController?: string | null
    ): TypedEventFilter<[string], { protocolFeeController: string }>;

    "ProtocolFeeUpdated(bytes32,uint24)"(
      id?: BytesLike | null,
      protocolFee?: null
    ): TypedEventFilter<[string, number], { id: string; protocolFee: number }>;

    ProtocolFeeUpdated(
      id?: BytesLike | null,
      protocolFee?: null
    ): TypedEventFilter<[string, number], { id: string; protocolFee: number }>;

    "Subscription(uint256,address)"(
      tokenId?: BigNumberish | null,
      subscriber?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; subscriber: string }
    >;

    Subscription(
      tokenId?: BigNumberish | null,
      subscriber?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; subscriber: string }
    >;

    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)"(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ],
      {
        id: string;
        sender: string;
        amount0: BigNumber;
        amount1: BigNumber;
        sqrtPriceX96: BigNumber;
        liquidity: BigNumber;
        tick: number;
        fee: number;
      }
    >;

    Swap(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ],
      {
        id: string;
        sender: string;
        amount0: BigNumber;
        amount1: BigNumber;
        sqrtPriceX96: BigNumber;
        liquidity: BigNumber;
        tick: number;
        fee: number;
      }
    >;

    "Transfer(address,address,address,uint256,uint256)"(
      caller?: null,
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        caller: string;
        from: string;
        to: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; id: BigNumber }
    >;

    "Unsubscription(uint256,address)"(
      tokenId?: BigNumberish | null,
      subscriber?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; subscriber: string }
    >;

    Unsubscription(
      tokenId?: BigNumberish | null,
      subscriber?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; subscriber: string }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256,uint256)"(
      spender: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clear(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donate(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exttload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exttload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAndPositionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionLiquidity(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePool(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyLiquidities(
      unlockData: BytesLike,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyLiquiditiesWithoutUnlock(
      actions: BytesLike,
      params: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyLiquidity(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
        salt: BytesLike;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: string,
      word: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "permit(address,uint256,uint256,uint256,bytes)"(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitForAll(
      owner: string,
      operator: string,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolKeys(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    positionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeNonce(
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleFor(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        zeroForOne: boolean;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenDescriptor(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256,uint256)"(
      sender: string,
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsubscribeGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateDynamicLPFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newDynamicLPFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256,uint256)"(
      spender: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clear(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exttload(bytes32[])"(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exttload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAndPositionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionLiquidity(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePool(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      sqrtPriceX96: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyLiquidities(
      unlockData: BytesLike,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyLiquiditiesWithoutUnlock(
      actions: BytesLike,
      params: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyLiquidity(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
        salt: BytesLike;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      word: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permit(address,uint256,uint256,uint256,bytes)"(
      spender: string,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
      owner: string,
      permitSingle: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        };
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitBatch(
      owner: string,
      _permitBatch: {
        details: {
          token: string;
          amount: BigNumberish;
          expiration: BigNumberish;
          nonce: BigNumberish;
        }[];
        spender: string;
        sigDeadline: BigNumberish;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitForAll(
      owner: string,
      operator: string,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolKeys(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionInfo(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeNonce(
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleFor(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      tokenId: BigNumberish,
      newSubscriber: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriber(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      params: {
        zeroForOne: boolean;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      hookData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenDescriptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256,uint256)"(
      sender: string,
      receiver: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribeGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDynamicLPFee(
      key: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      newDynamicLPFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
